 <dependencies>
        <!-- Para hacer llamadas HTTP -->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
            <version>5.2.1</version>
        </dependency>

        <!-- Para manejar JSON -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20231013</version>
        </dependency>
    </dependencies>


----------------------------------------------------------------------------------------------------------------------------------------------

import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.FileWriter;

public class AppDReporter {

    private static final String BEARER_TOKEN = "<TU_TOKEN_AQUI>";
    private static final String CONTROLLER = "https://<tu-controller>";
    private static final String APPLICATION = "NombreAppDynamics";
    private static final String METRIC = "Hardware Resources|CPU|%Used";

    public static void main(String[] args) throws Exception {
        String encodedMetric = METRIC.replace("|", "%7C").replace(" ", "%20");

        String url = CONTROLLER + "/controller/rest/applications/" + APPLICATION +
                "/metric-data?metric-path=" + encodedMetric +
                "&time-range-type=BEFORE_NOW&duration-in-mins=60&output=JSON";

        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);
            request.setHeader("Authorization", "Bearer " + BEARER_TOKEN);
            request.setHeader("Accept", "application/json");

            var response = client.execute(request);
            String json = EntityUtils.toString(response.getEntity());

            JSONArray array = new JSONArray(json);
            JSONObject metricData = array.getJSONObject(0);
            JSONArray values = metricData.getJSONArray("metricValues");
            JSONObject lastValue = values.getJSONObject(values.length() - 1);

            double avg = lastValue.getDouble("value");

            generateHtmlReport(METRIC, avg);
        }
    }

    private static void generateHtmlReport(String metric, double value) throws Exception {
        try (FileWriter writer = new FileWriter("appdynamics-report.html")) {
            writer.write("<html><head><title>AppDynamics Report</title></head><body>");
            writer.write("<h1>Reporte de Métricas - AppDynamics</h1>");
            writer.write("<p><strong>Métrica:</strong> " + metric + "</p>");
            writer.write("<p><strong>Último valor promedio:</strong> " + value + "</p>");
            writer.write("</body></html>");
        }
    }
}

-----------------------------------------------------------------------------------------------------------

import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import javax.net.ssl.SSLContext;

SSLContext sslContext = SSLContextBuilder.create()
        .loadTrustMaterial((chain, authType) -> true) // acepta todos los certificados
        .build();

CloseableHttpClient httpClient = HttpClients.custom()
        .setSSLContext(sslContext)
        .build();


---------------------------------------------------------------------------------------------------------

import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.impl.io.DefaultHttpRequestRetryStrategy;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.ClassicHttpResponse;

import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;

public class AppdClient {

    public static void main(String[] args) throws Exception {
        String url = "https://tu-api.appdynamics.com";
        String BEARER_TOKEN = "AQUÍ_TU_TOKEN";

        // Ignorar verificación SSL (NO para producción)
        SSLContext sslContext = SSLContextBuilder.create()
                .loadTrustMaterial((X509Certificate[] chain, String authType) -> true)
                .build();

        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);

        try (CloseableHttpClient client = HttpClients.custom()
                .setSSLSocketFactory(sslsf)
                .build()) {

            HttpGet request = new HttpGet(url);
            request.setHeader("Authorization", "Bearer " + BEARER_TOKEN);
            request.setHeader("Accept", "application/json");

            ClassicHttpResponse response = client.executeOpen(null, request, null);
            String json = EntityUtils.toString(response.getEntity());
            System.out.println("Respuesta:");
            System.out.println(json);
        }
    }
}
---------------------------------------------------------------------------------------------------------

import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;

SSLContext sslContext = SSLContextBuilder.create()
        .loadTrustMaterial((X509Certificate[] chain, String authType) -> true) // confía en todos
        .build();

SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext);

try (CloseableHttpClient client = HttpClients.custom()
        .setSSLSocketFactory(sslSocketFactory)  // ESTE ES EL CORRECTO
        .build()) {

    HttpGet request = new HttpGet(url);
    request.setHeader("Authorization", "Bearer " + BEARER_TOKEN);
    request.setHeader("Accept", "application/json");

    ClassicHttpResponse response = client.executeOpen(null, request, null);
    String json = EntityUtils.toString(response.getEntity());
    System.out.println("Respuesta:");
    System.out.println(json);
}


---------------------------------------------------------------------------------------------------------------
SSLContext sslContext = SSLContextBuilder.create()
        .loadTrustMaterial((X509Certificate[] chain, String authType) -> true)
        .build();

SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext);

HttpClientConnectionManager connManager = PoolingHttpClientConnectionManagerBuilder.create()
    .setSSLSocketFactory(sslSocketFactory)
    .build();

try (CloseableHttpClient client = HttpClients.custom()
        .setConnectionManager(connManager)
        .build()) {

    HttpGet request = new HttpGet(url);
    request.setHeader("Authorization", "Bearer " + BEARER_TOKEN);
    request.setHeader("Accept", "application/json");

    ClassicHttpResponse response = client.executeOpen(null, request, null);
    String json = EntityUtils.toString(response.getEntity());

    // tu lógica de parseo JSON...
}


-----------------------------------------------------------------------------------------------------------


import org.json.XML;
import org.json.JSONObject;

String xml = EntityUtils.toString(response.getEntity());
System.out.println("Respuesta en XML:");
System.out.println(xml);

// Convertir a JSON
JSONObject json = XML.toJSONObject(xml);
System.out.println("Convertido a JSON:");
System.out.println(json.toString(4)); // con identación


---------------------------------------------------------------------------------------------------------
@test3
Scenario: Performance test for the new Payments service
  When I prepare valid "PaymentsInput.xml" result
  And I prepare project group suite name with "Payments Performance" "Prueba pagos"
  And JMeterAgent executeSOAPWithParameter "<dominio>" "<puerto>" "<path>" "<metodo>" "<protocolo>" "<tiempo>" "<tipo>"
  Then read JMeter test results from the file "JmeterTestResults.jtl"
  And all responses should have status code 200
  And all responses should have response time less than 2500 milliseconds

Examples:
  | dominio                        | puerto | path                                | metodo | protocolo | tiempo | tipo              |
  | pagos-api.nsroot.net          | 8443   | /api/payments/execute               | POST   | https     | 2500   | application/json  |
