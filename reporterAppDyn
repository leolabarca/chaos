 <dependencies>
        <!-- Para hacer llamadas HTTP -->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
            <version>5.2.1</version>
        </dependency>

        <!-- Para manejar JSON -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20231013</version>
        </dependency>
    </dependencies>


----------------------------------------------------------------------------------------------------------------------------------------------

import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.FileWriter;

public class AppDReporter {

    private static final String BEARER_TOKEN = "<TU_TOKEN_AQUI>";
    private static final String CONTROLLER = "https://<tu-controller>";
    private static final String APPLICATION = "NombreAppDynamics";
    private static final String METRIC = "Hardware Resources|CPU|%Used";

    public static void main(String[] args) throws Exception {
        String encodedMetric = METRIC.replace("|", "%7C").replace(" ", "%20");

        String url = CONTROLLER + "/controller/rest/applications/" + APPLICATION +
                "/metric-data?metric-path=" + encodedMetric +
                "&time-range-type=BEFORE_NOW&duration-in-mins=60&output=JSON";

        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);
            request.setHeader("Authorization", "Bearer " + BEARER_TOKEN);
            request.setHeader("Accept", "application/json");

            var response = client.execute(request);
            String json = EntityUtils.toString(response.getEntity());

            JSONArray array = new JSONArray(json);
            JSONObject metricData = array.getJSONObject(0);
            JSONArray values = metricData.getJSONArray("metricValues");
            JSONObject lastValue = values.getJSONObject(values.length() - 1);

            double avg = lastValue.getDouble("value");

            generateHtmlReport(METRIC, avg);
        }
    }

    private static void generateHtmlReport(String metric, double value) throws Exception {
        try (FileWriter writer = new FileWriter("appdynamics-report.html")) {
            writer.write("<html><head><title>AppDynamics Report</title></head><body>");
            writer.write("<h1>Reporte de Métricas - AppDynamics</h1>");
            writer.write("<p><strong>Métrica:</strong> " + metric + "</p>");
            writer.write("<p><strong>Último valor promedio:</strong> " + value + "</p>");
            writer.write("</body></html>");
        }
    }
}
